exit
c
n
exit
@board[move] != Nullpiece.instance
@board[move]
move
s
valid(move)
valid(move}
move
n
move
dy
dx
s
grow_unblocked_moves_in_dir(1,1)
exit
self.board
grow_unblocked_moves_in_dir(1,1)
grow_unblocked_moves_in_dir(-1,1)
grow_unblocked_moves_in_dir(1,-1)
grow_unblocked_moves_in_dir(1,1)
@pos
diagonal_dirs
move_arr
n
exit
n
to_pos
from_pos
n
move_arr
exit
n
!valid?(from_pos, to_pos)
exit
valid?
!valid?
exit
self[from_pos].valid_moves.include?(to_pos)
n
side_attacks
forward_steps
exit
@pos
forward_arr
n
forward_arr
n
s
side_attacks
forward_steps
s
moves
c
nc
n
s
exit
self[from_pos]
self[from_pos].valid_moves
exit
c
n
exit
eixt
moves
move
exit
n
@board[move] == Nullpiece.instance
move
n
s
@board[move].color != @color
@color
@board[move].color
@board[move] == Nullpiece.instance
@board[move]
move
s
move_arr
exit
@board[0,0]
@board
@board[[0,0]]
@board[move]
move
@board
board[move]
@board[move] == Nullpiece.instance
move
n
exit
n
exit
move
q
exit
n
exit
move
@board[move] == Nullpiece.instance
n
move == forward_arr[1] && @board[forward_arr[0]] != Nullpiece.instance
s
forward_arr
n
start_row?
s
side_attacks
forward_steps
s
moves
n
s
n
s
n
s
self[from_pos].symbol
self[from_pos]
exit
n
moves
n
exit
n
s
n
s
self[from_pos].valid_moves
exit
n
s
n
s
self[from_pos].valid_moves
to_pos
from_pos
exit
c
symbol
c
symbol
c
n
symbol
symnol
n
symbol
n
symbol
s
empty?
symbol
c
symbol
c
symbol
c
symbol
c
symbol
c
symbol
c
symbol
self
exit
s
val
n
pos
n
s
Nullpiece.instance
pos
self[pos]
n
s
n
col
s
col
row
n
col
c
col
c
col
row
c
row
ro
